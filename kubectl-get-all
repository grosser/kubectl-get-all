#!/usr/bin/env ruby
# use kubectl to get all resources

require 'json'
require 'shellwords'

def sh(command)
  result = `#{command} 2>&1` # need to capture so parallel execution remains readable
  success = $?.success?
  result = "#{command}\n#{result}" unless success
  [success, result]
end

def sh!(command)
  success, result = sh command
  abort result unless success
  result
end

def kubectl(command)
  sh "kubectl #{command}"
end

def extract_option(*formats, required:, has_value: true)
  formats.each do |option|
    ARGV.each_with_index do |arg, i|
      if arg == option # ["-p", "foo"]
        ARGV.delete_at i
        return has_value ? ARGV.delete_at(i) : true
      end
      if (value = arg[/^#{option}=(.*)/, 1]) # ["-p=foo"]
        ARGV.delete_at i
        return value
      end
    end
  end
  abort "No #{formats.join(" or ")} option given" if required
end

def discard_option(*formats, **kwargs)
  extract_option(*formats, required: false, **kwargs)
end

def in_parallel(items, parallel:, &block)
  return items.map(&block) if parallel == 0

  results = []
  items = items.each_with_index.to_a
  threads = Array.new(parallel).map do
    Thread.new do
      while (item = items.shift)
        results[item[1]] = yield item[0]
      end
    end
  end

  # wait for all threads to finish and re-raise exception if they happen
  loop do
    break if threads.all? { |t| t.join(0) }
    sleep 0.1
  end

  results
end

if (namespace = extract_option "-n", "--namespace", required: false)
  namespace = "-n #{namespace.shellescape}"
end
if (context = extract_option "--context", required: false)
  context = "--context #{context.shellescape}"
end
parallel = Integer(extract_option("--parallel", required: false) || "10")

# find apis
apis = sh!("kubectl api-resources --verbs=list #{context} #{"--namespaced" if namespace} -o name").split("\n")
warn "loading #{apis.size} apis in #{parallel} threads ..."

# get items
mutex = Mutex.new
successes = in_parallel(apis, parallel: parallel) do |api|
  success, result = kubectl("get #{api} #{context} #{namespace} --ignore-not-found --show-kind #{ARGV.shelljoin}")
  if !success || !result.empty?
    mutex.synchronize do
      if success
        puts result
      else
        warn result
      end
    end
  end
  success
end
abort unless successes.all?
